import logging
import random
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

logging.getLogger('httpx').setLevel(logging.WARNING)
logging.getLogger('telegram').setLevel(logging.WARNING)
logging.getLogger('httpcore').setLevel(logging.WARNING)
logging.getLogger('asyncio').setLevel(logging.WARNING)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
logger = logging.getLogger('user_actions')
logger.setLevel(logging.INFO)

# –°–æ–∑–¥–∞–µ–º handler –¥–ª—è —Ñ–∞–π–ª–∞
file_handler = logging.FileHandler('user_actions.log', encoding='utf-8')
file_handler.setFormatter(logging.Formatter('%(asctime)s - USER ACTION - %(message)s'))

# –°–æ–∑–¥–∞–µ–º handler –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter('%(asctime)s - USER ACTION - %(message)s'))

# –î–æ–±–∞–≤–ª—è–µ–º handlers –∫ –Ω–∞—à–µ–º—É –ª–æ–≥–≥–µ—Ä—É
logger.addHandler(file_handler)
logger.addHandler(console_handler)

# –û—Ç–∫–ª—é—á–∞–µ–º propagation –¥–ª—è –Ω–∞—à–µ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
logger.propagate = False

# –î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
historical_events = [
    "30 –Ω–æ—è–±—Ä—è 1939 ‚Äì 12 –º–∞—Ä—Ç–∞ 1940 –≥.–≥. —Å–æ–≤–µ—Ç—Å–∫–æ-—Ñ–∏–Ω—Å–∫–∞—è –≤–æ–π–Ω–∞.",
    "–¥–µ–∫–∞–±—Ä—å 1939 –≥. –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –°–°–°–† –∏–∑ –õ–∏–≥–∏ –ù–∞—Ü–∏–π.",
    "22 –∏—é–Ω—è 1941 –≥. –Ω–∞–ø–∞–¥–µ–Ω–∏–µ –ì–µ—Ä–º–∞–Ω–∏–∏ –Ω–∞ –°–°–°–†, –Ω–∞—á–∞–ª–æ –í–µ–ª–∏–∫–æ–π –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–æ–π–Ω—ã.",
    "23 –∏—é–Ω—è 1941 –≥. –æ–±—Ä–∞–∑–æ–≤–∞–ª–∞ –°—Ç–∞–≤–∫–∞ –ì–ª–∞–≤–Ω–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ–≤–∞–Ω–∏—è (–°—Ç–∞–≤–∫–∞ –í–µ—Ä—Ö–æ–≤–Ω–æ–≥–æ –ì–ª–∞–≤–Ω–æ–∫–æ–º–∞–Ω–¥–æ–≤–∞–Ω–∏—è).",
    "30 –∏—é–Ω—è 1941 –≥. –æ–±—Ä–∞–∑–æ–≤–∞–ª –ì–ö–û (–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–º–∏—Ç–µ—Ç –æ–±–æ—Ä–æ–Ω—ã).",
    "10 –∏—é–ª—è ‚Äì 10 —Å–µ–Ω—Ç—è–±—Ä—è 1941 –≥. –±–æ–∏ –∑–∞ –°–º–æ–ª–µ–Ω—Å–∫.",
    "8 —Å–µ–Ω—Ç—è–±—Ä—è 1941 –≥. –Ω–∞—á–∞–ª–æ –±–ª–æ–∫–∞–¥—ã –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥–∞.",
    "30 —Å–µ–Ω—Ç—è–±—Ä—è 1941 ‚Äì –∞–ø—Ä–µ–ª—å 1942 –≥.–≥. –±–æ–∏ –∑–∞ –ú–æ—Å–∫–≤—É.",
    "19 –æ–∫—Ç—è–±—Ä—è 1941 –≥. –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Å–∞–¥–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è –≤ –ú–æ—Å–∫–≤–µ.",
    "7 –Ω–æ—è–±—Ä—è 1941 –≥. –ø–∞—Ä–∞–¥ –Ω–∞ –ö—Ä–∞—Å–Ω–æ–π –ø–ª–æ—â–∞–¥–∏ –≤ –ú–æ—Å–∫–≤–µ.",
    "5-6 –¥–µ–∫–∞–±—Ä—è 1941 –≥. –Ω–∞—á–∞–ª–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É—à–µ–Ω–∏—è –ö—Ä–∞—Å–Ω–æ–π –ê—Ä–º–∏–∏ –ø–æ–¥ –ú–æ—Å–∫–≤–æ–π.",
    "–¥–µ–∫–∞–±—Ä—å 1941 –≥. –Ω–∞–ø–∞–¥–µ–Ω–∏–µ –≤–æ–π—Å–∫ –Ø–ø–æ–Ω–∏–∏ –Ω–∞ –ü–µ—Ä–ª-–•–∞—Ä–±–æ—Ä, –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –°–®–ê –≤ –≤–æ–π–Ω—É.",
    "28 –∏—é–ª—è 1942 –≥. –ø—Ä–∏–∫–∞–∑ ‚Ññ 227 ¬´–ù–∏ —à–∞–≥—É –Ω–∞–∑–∞–¥!¬ª.",
    "–∏—é–ª—å ‚Äì –¥–µ–∫–∞–±—Ä—å 1942 –≥. –±–∏—Ç–≤–∞ –∑–∞ –ö–∞–≤–∫–∞–∑.",
    "17 –∏—é–ª—è 1942 ‚Äì 2 —Ñ–µ–≤—Ä–∞–ª—è 1943 –≥.–≥. –°—Ç–∞–ª–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –±–∏—Ç–≤–∞.",
    "—è–Ω–≤–∞—Ä—å 1943 –≥. –ø—Ä–æ—Ä—ã–≤ –±–ª–æ–∫–∞–¥—ã –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥–∞.",
    "–Ω–æ—è–±—Ä—å ‚Äì –¥–µ–∫–∞–±—Ä—å 1943 –≥. –¢–µ–≥–µ—Ä–∞–Ω—Å–∫–∞—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è.",
    "5 –∏—é–ª—è ‚Äì 23 –∞–≤–≥—É—Å—Ç–∞ 1943 –≥. –ö—É—Ä—Å–∫–∞—è –±–∏—Ç–≤–∞.",
    "12 –∏—é–ª—è 1943 –≥. —Ç–∞–Ω–∫–æ–≤–æ–µ —Å—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥ –ü—Ä–æ—Ö–æ—Ä–æ–≤–∫–æ–π.",
    "5 –∞–≤–≥—É—Å—Ç–∞ 1943 –≥. –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –û—Ä–ª–∞ –∏ –ë–µ–ª–≥–æ—Ä–æ–¥–∞, 1-–π —Å–∞–ª—é—Ç –≤ –ú–æ—Å–∫–≤–µ.",
    "25 –∞–≤–≥—É—Å—Ç–∞ ‚Äì 23 –¥–µ–∫–∞–±—Ä—è 1943 –≥. –±–∏—Ç–≤–∞ –∑–∞ –î–Ω–µ–ø—Ä: –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ö–∏–µ–≤–∞, –õ–µ–≤–æ–±–µ—Ä–µ–∂–Ω–æ–π –∏ —á–∞—Å—Ç–∏ –ü—Ä–∞–≤–æ–±–µ—Ä–µ–∂–Ω–æ–π –£–∫—Ä–∞–∏–Ω—ã.",
    "6 –Ω–æ—è–±—Ä—è 1943 –≥. –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ö–∏–µ–≤–∞.",
    "27 —è–Ω–≤–∞—Ä—è 1944 –≥. –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–Ω—è—Ç–∞ –±–ª–æ–∫–∞–¥–∞ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥–∞.",
    "–º–∞–π 1944 –≥. –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ö—Ä—ã–º–∞, –≤–∑—è—Ç–∏–µ –°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—è.",
    "6 –∏—é–Ω—è 1944 –≥. –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–æ—é–∑–Ω–∏–∫–∞–º–∏ 2-–≥–æ —Ñ—Ä–æ–Ω—Ç–∞.",
    "–∏—é–ª—å ‚Äì –∞–≤–≥—É—Å—Ç 1944 –≥. –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ë–µ–ª–æ—Ä—É—Å—Å–∏–∏ (–æ–ø–µ—Ä–∞—Ü–∏—è ¬´–ë–∞–≥—Ä–∞—Ç–∏–æ–Ω¬ª).",
    "–∞–≤–≥—É—Å—Ç ‚Äì –æ–∫—Ç—è–±—Ä—å 1944 –≥. –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ú–æ–ª–¥–∞–≤–∏–∏.",
    "—Å–µ–Ω—Ç—è–±—Ä—å ‚Äì –æ–∫—Ç—è–±—Ä—å 1944 –≥. –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ü—Ä–∏–±–∞—Ç—Ç–∏–∫–∏.",
    "–∏—é–Ω—å 1944 ‚Äì –º–∞–π 1945 –≥.–≥. –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω –í–æ—Å—Ç–æ—á–Ω–æ–π –ï–≤—Ä–æ–ø—ã.",
    "4 ‚Äì 11 —Ñ–µ–≤—Ä–∞–ª—è 1945 –≥. –Ø–ª—Ç–∏–Ω—Å–∫–∞—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è.",
    "16 –∞–ø—Ä–µ–ª—è ‚Äì 2 –º–∞—è 1945 –≥. –±–∏—Ç–≤–∞ –∑–∞ –ë–µ—Ä–ª–∏–Ω.",
    "8 –º–∞—è 1945 –≥. –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∞ –æ –±–µ–∑–æ–≥–æ–≤–æ—Ä–æ—á–Ω–æ–π –∫–∞–ø–∏—Ç—É–ª—è—Ü–∏–∏.",
    "9 –º–∞—è 1945 –≥. –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ü—Ä–∞–≥–∏ (–ü—Ä–∞–∂—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è).",
    "9 –º–∞—è 1945 –≥. –æ–∫–æ–Ω—á–∞–Ω–∏–µ –í–µ–ª–∏–∫–æ–π –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–æ–π–Ω—ã.",
    "17 –∏—é–ª—è ‚Äì 2 –∞–≤–≥—É—Å—Ç–∞ 1945 –≥. –ü–æ—Ç—Å–¥–∞–º—Å–∫–∞—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è.",
    "6, 9 –∞–≤–≥—É—Å—Ç–∞ 1945 –≥. –±–æ–º–±–∞—Ä–¥–∏—Ä–æ–≤–∫–∞ –•–∏—Ä–æ—Å–∏–º—ã –∏ –ù–∞–≥–∞—Å–∞–∫–∏.",
    "8 –∞–≤–≥—É—Å—Ç–∞ 1945 –≥. –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –°–°–°–† –≤ –≤–æ–π–Ω—É –ø—Ä–æ—Ç–∏–≤ –Ø–ø–æ–Ω–∏–∏.",
    "2 —Å–µ–Ω—Ç—è–±—Ä—è 1945 –≥. –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∞ –æ –±–µ–∑–æ–≥–æ–≤–æ—Ä–æ—á–Ω–æ–π –∫–∞–ø–∏—Ç—É–ª—è—Ü–∏–∏ –Ø–ø–æ–Ω–∏–∏, –æ–∫–æ–Ω—á–∞–Ω–∏–µ II –ú–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω—ã.",
    "1945 –≥. —Å–æ–∑–¥–∞–Ω–∏–µ –û–û–ù.",
    "1946 ‚Äì 1953 –≥.–≥. –≤–æ–ª–Ω–∞ –∏–¥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∏ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–ø—Ä–µ—Å—Å–∏–π (–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ –∂—É—Ä–Ω–∞–ª–∞—Ö, –∫–∏–Ω–æ—Ñ–∏–ª—å–º–∞—Ö, –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è—Ö, –±–æ—Ä—å–±–∞ —Å –∫–æ—Å–º–æ–ø–æ–ª–∏—Ç–∏–∑–º–æ–º, ¬´–ª–µ—à–Ω–∏–≥—Ä–∞–¥—Å–∫–æ–µ –¥–µ–ª–æ¬ª, ¬´–¥–µ–ª–æ –≤—Ä–∞—á–µ–π¬ª); –∞–ø–æ–≥–µ–π —Å—Ç–∞–ª–∏–Ω–∏–∑–º–∞.",
    "–º–∞—Ä—Ç 1946 –≥. –°–ù–ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–ª –≤ –°–æ–≤–µ—Ç –ú–∏–Ω–∏—Å—Ç—Ä–æ–≤.",
    "1947 –≥. –¥–µ–Ω–µ–∂–Ω–∞—è —Ä–µ—Ñ–æ—Ä–º–∞, –æ—Ç–º–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.",
    "1949 –≥. –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ù–ê–¢–û.",
    "1949 –≥. —Å–æ–∑–¥–∞–Ω–∏–µ –°–≠–í.",
    "1949 –≥. –∏—Å–ø—ã—Ç–∞–Ω–∏–µ 1-–π —Å–æ–≤–µ—Ç—Å–∫–æ–π –∞—Ç–æ–º–Ω–æ–π –±–æ–º–±—ã.",
    "–æ–∫—Ç—è–±—Ä—å 1952 –≥. –í–ö–ü(–±) –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∞ –≤ –ö–ü–°–°.",
    "5 –º–∞—Ä—Ç–∞ 1953 –≥. —Å–º–µ—Ä—Ç—å –°—Ç–∞–ª–∏–Ω–∞."
]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
LEARNING, TESTING = range(2)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_keyboard = ReplyKeyboardMarkup([
    ['üìö –û–±—É—á–∞—é—â–∏–π —Ä–µ–∂–∏–º', 'üìù –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º'],
    ['‚ùå –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞']
], resize_keyboard=True)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def log_user_action(user_id, username, action):
    logger.info(f"UserID: {user_id}, Username: {username}, Action: {action}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞—Ç—ã –∏–∑ —Å–æ–±—ã—Ç–∏—è
def extract_date(event):
    words = event.split()
    for word in words:
        if any(char.isdigit() for char in word) and any(char.isalpha() for char in word):
            return word
        if any(char.isdigit() for char in word) and '-' in word:
            return word
        if any(char.isdigit() for char in word) and '.' in word:
            return word
    for word in words:
        if len(word) == 4 and word.isdigit():
            return word
    return "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞—Ç—É"


# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    log_user_action(user.id, user.username, "started the bot")

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞—á–µ—Ç–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏.\n"
        "–ü–∏–≤–∞—Ä—à–µ–≤ —à–∏–∑–æ–∏–¥ \n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        reply_markup=main_keyboard
    )


# –û–±—É—á–∞—é—â–∏–π —Ä–µ–∂–∏–º
async def learning_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    log_user_action(user.id, user.username, "entered learning mode")

    context.user_data['mode'] = 'learning'
    context.user_data['used_events'] = []

    available_events = [e for e in historical_events if e not in context.user_data['used_events']]
    if not available_events:
        context.user_data['used_events'] = []
        available_events = historical_events.copy()
        log_user_action(user.id, user.username, "reset learning events")

    event = random.choice(available_events)
    context.user_data['used_events'].append(event)
    context.user_data['current_event'] = event

    log_user_action(user.id, user.username, f"shown event: {event[:50]}...")
    await update.message.reply_text(f"üìö –û–±—É—á–∞—é—â–∏–π —Ä–µ–∂–∏–º:\n\n{event}\n\n–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    return LEARNING


# –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
async def test_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    log_user_action(user.id, user.username, "entered test mode")

    context.user_data['mode'] = 'test'
    context.user_data['used_events'] = []

    available_events = [e for e in historical_events if e not in context.user_data['used_events']]
    if not available_events:
        context.user_data['used_events'] = []
        available_events = historical_events.copy()
        log_user_action(user.id, user.username, "reset test events")

    event = random.choice(available_events)
    context.user_data['used_events'].append(event)
    context.user_data['current_event'] = event

    correct_date = extract_date(event)
    context.user_data['correct_date'] = correct_date

    event_without_date = event.replace(correct_date, '_____')
    log_user_action(user.id, user.username, f"test question: {event[:50]}...")
    await update.message.reply_text(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º:\n\n{event_without_date}\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É:")
    return TESTING


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –æ–±—É—á–∞—é—â–µ–º —Ä–µ–∂–∏–º–µ
async def handle_learning_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    log_user_action(user.id, user.username, "pressed next in learning mode")

    if len(context.user_data['used_events']) >= len(historical_events):
        await update.message.reply_text("–í—Å–µ —Å–æ–±—ã—Ç–∏—è –∏–∑—É—á–µ–Ω—ã! –ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ.")
        context.user_data['used_events'] = []
        log_user_action(user.id, user.username, "all events learned, resetting")

    available_events = [e for e in historical_events if e not in context.user_data['used_events']]
    if not available_events:
        context.user_data['used_events'] = []
        available_events = historical_events.copy()

    event = random.choice(available_events)
    context.user_data['used_events'].append(event)
    context.user_data['current_event'] = event

    log_user_action(user.id, user.username, f"next event: {event[:50]}...")
    await update.message.reply_text(f"üìö –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ:\n\n{event}\n\n–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    return LEARNING


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
async def handle_test_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_answer = update.message.text.strip()
    correct_date = context.user_data['correct_date']

    log_user_action(user.id, user.username, f"test answer: '{user_answer}' for correct: '{correct_date}'")

    if user_answer.lower() in correct_date.lower() or correct_date.lower() in user_answer.lower():
        await update.message.reply_text("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! üëç")
        log_user_action(user.id, user.username, "correct answer")
    else:
        await update.message.reply_text(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_date}")
        log_user_action(user.id, user.username, "wrong answer")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    if len(context.user_data['used_events']) >= len(historical_events):
        await update.message.reply_text("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–π–¥–µ–Ω—ã.")
        log_user_action(user.id, user.username, "test completed all events")
        return ConversationHandler.END

    available_events = [e for e in historical_events if e not in context.user_data['used_events']]
    if not available_events:
        await update.message.reply_text("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–π–¥–µ–Ω—ã.")
        log_user_action(user.id, user.username, "test completed all events")
        return ConversationHandler.END

    event = random.choice(available_events)
    context.user_data['used_events'].append(event)
    context.user_data['current_event'] = event

    correct_date = extract_date(event)
    context.user_data['correct_date'] = correct_date

    event_without_date = event.replace(correct_date, '_____')
    log_user_action(user.id, user.username, f"next test question: {event[:50]}...")
    await update.message.reply_text(f"üìù –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n\n{event_without_date}\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É:")
    return TESTING


# –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞
async def exit_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    mode = context.user_data.get('mode', 'unknown')
    log_user_action(user.id, user.username, f"exited {mode} mode")

    await update.message.reply_text(
        "–†–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º:",
        reply_markup=main_keyboard
    )
    return ConversationHandler.END


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    application = Application.builder().token('8330291150:AAHYo_kOkYDrawBvpnSmGVUtQqdaYH6-NWM').build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler('start', start))

    # ConversationHandler –¥–ª—è –æ–±—É—á–∞—é—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
    learning_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^üìö –û–±—É—á–∞—é—â–∏–π —Ä–µ–∂–∏–º$'), learning_mode)],
        states={
            LEARNING: [MessageHandler(filters.TEXT & ~filters.Regex('^‚ùå –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞$'), handle_learning_response)]
        },
        fallbacks=[MessageHandler(filters.Regex('^‚ùå –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞$'), exit_mode)]
    )

    # ConversationHandler –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
    test_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^üìù –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º$'), test_mode)],
        states={
            TESTING: [MessageHandler(filters.TEXT & ~filters.Regex('^‚ùå –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞$'), handle_test_response)]
        },
        fallbacks=[MessageHandler(filters.Regex('^‚ùå –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞$'), exit_mode)]
    )

    application.add_handler(learning_conv_handler)
    application.add_handler(test_conv_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == '__main__':
    main()